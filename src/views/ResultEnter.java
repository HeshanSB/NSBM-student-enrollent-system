/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import Controller.BachelorStudentController;
import Controller.MasterStudentController;
import Controller.NormalSubjectController;
import Controller.PraticalSubjectController;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.BachelorStudent;
import model.MasterStudent;

/**
 *
 * @author Heshan
 */
public class ResultEnter extends javax.swing.JFrame {

    public int subId = 0;
    public ResultEnter() {
        initComponents();
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        normalSubject = new javax.swing.JRadioButton();
        practicalSubject = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        subjectIdTxt = new javax.swing.JTextField();
        viewBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        exitBtn1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Result Edit");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 10, 110, 30);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        buttonGroup1.add(normalSubject);
        normalSubject.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        normalSubject.setText("Normal Subject");

        buttonGroup1.add(practicalSubject);
        practicalSubject.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        practicalSubject.setText("Practical Subject");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Subject ID");

        viewBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        viewBtn.setText("VIEW");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(normalSubject)
                    .addComponent(practicalSubject)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(viewBtn)
                            .addComponent(subjectIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(121, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(normalSubject)
                .addGap(18, 18, 18)
                .addComponent(practicalSubject)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(subjectIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(viewBtn)
                .addGap(35, 35, 35))
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(10, 60, 290, 230);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student Id ", "Result"
            }
        ));
        jScrollPane1.setViewportView(resultTable);

        addBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(addBtn)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(addBtn)
                .addContainerGap())
        );

        jPanel1.add(jPanel3);
        jPanel3.setBounds(330, 60, 360, 430);

        exitBtn1.setText("Exit");
        exitBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtn1ActionPerformed(evt);
            }
        });
        jPanel1.add(exitBtn1);
        exitBtn1.setBounds(100, 470, 60, 23);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/if_calculator_1291736.png"))); // NOI18N
        jPanel1.add(jLabel3);
        jLabel3.setBounds(540, 10, 48, 50);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        subId = Integer.parseInt(subjectIdTxt.getText());
        BachelorStudentController bsc = new BachelorStudentController();
        MasterStudentController msc = new MasterStudentController();
        ArrayList<BachelorStudent> bStudentList = new ArrayList<>();
        ArrayList<MasterStudent> mStudentList = new ArrayList<>();
        DefaultTableModel dtm = (DefaultTableModel) resultTable.getModel();
        dtm.setRowCount(0);
        if(normalSubject.isSelected() == true){
            NormalSubjectController nsm = new NormalSubjectController();
            int year = 0;
            try {
                year = nsm.getSubjectYear(subId);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
            }
            int checkCom = 0;
            try{
                checkCom = nsm.checkOptionalOrNot(subId);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(checkCom == 1){
                int courseId = 0;
                try{
                    courseId = nsm.getCourseNumber(subId);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                }
                if(courseId <= 3000){
                    try{
                        bStudentList = bsc.getAllStudents(courseId,year);
                        for(BachelorStudent bStudent : bStudentList){
                            Object[] rowData = {bStudent.getStudentId()};
                            dtm.addRow(rowData);
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else if(courseId > 3000){
                    try{
                        mStudentList = msc.getAllStudents(courseId, year);
                        for(MasterStudent mStudent : mStudentList){
                            Object[] rowData = {mStudent.getStudentId()};
                            dtm.addRow(rowData);
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }else if(checkCom == 0){
                int oCourseId = 0;
                try {
                    oCourseId = nsm.getCourseNumber(subId);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                }
                ArrayList optionalStudentList = new ArrayList();
                if(oCourseId<= 3000){
                    try {
                        optionalStudentList = nsm.getAllBachelorOptionalSubjectChooseStuId(subId);
                        for(int i =0 ; i<optionalStudentList.size(); i++){
                            Object[] rowData = {optionalStudentList.get(i)};
                            dtm.addRow(rowData);
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }else if(oCourseId>3000){
                    try {
                        optionalStudentList = nsm.getAllMasterOptionalSubjectChooseStuId(subId);
                        for(int i =0 ; i<optionalStudentList.size(); i++){
                            Object[] rowData = {optionalStudentList.get(i)};
                            dtm.addRow(rowData);
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }else if(practicalSubject.isSelected() == true){
            PraticalSubjectController psc = new PraticalSubjectController();
            int year = 0;
            try {
                year = psc.getSubjectYear(subId);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
            }
            int pCourseId = 0;
            try {
                pCourseId = psc.getCourseNumber(subId);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(pCourseId <= 3000){
                try {
                    bStudentList = bsc.getAllStudents(pCourseId, year);
                    for(BachelorStudent bStudent : bStudentList){
                        Object[] rowData = {bStudent.getStudentId()};
                        dtm.addRow(rowData);
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else if(pCourseId > 3000){
                try{
                    mStudentList = msc.getAllStudents(pCourseId, year);
                    for(MasterStudent mStudent : mStudentList){
                        Object[] rowData = {mStudent.getStudentId()};
                        dtm.addRow(rowData);
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_viewBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) resultTable.getModel();
        subId = Integer.parseInt(subjectIdTxt.getText());
        if(normalSubject.isSelected()==true){
            NormalSubjectController nsm = new NormalSubjectController();
            int courseId = 0;
            try {
                courseId = nsm.getCourseNumber(subId);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(courseId<=3000){
                try{
                    int res = 0;
                    int count = resultTable.getRowCount();
                    for(int i=0; i<count; i++){
                        int stuId = Integer.parseInt(dtm.getValueAt(i, 0).toString());
                        String result = dtm.getValueAt(i, 1).toString();
                        res = res + nsm.addBachelorNormalResult(subId, stuId, result);
                    }
                    if(res==count){
                        JOptionPane.showMessageDialog(this, "Added Successfully");
                    }
                }catch(NullPointerException e){
                    JOptionPane.showMessageDialog(this, "Enter all results","error",JOptionPane.ERROR_MESSAGE);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else if(courseId> 3000){
                try{
                    int res = 0;
                    int count = resultTable.getRowCount();
                    for(int i=0; i<count; i++){
                        int stuId = Integer.parseInt(dtm.getValueAt(i, 0).toString());
                        String result = dtm.getValueAt(i, 1).toString();
                        res = res + nsm.addMasterNormalResult(subId, stuId, result);
                    }
                    if(res == count){
                        JOptionPane.showMessageDialog(this, "Added Successfully");
                    }
                }catch(NullPointerException e){
                    JOptionPane.showMessageDialog(this, "Enter all results","error",JOptionPane.ERROR_MESSAGE);    
                }catch (ClassNotFoundException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                }catch (SQLException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }else if(practicalSubject.isSelected()== true){
            PraticalSubjectController psc = new PraticalSubjectController();
            int courseId = 0;
            try{
                courseId = psc.getCourseNumber(subId);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(courseId<=3000){
                try{
                    int res = 0;
                    int count = resultTable.getRowCount();
                    for(int i=0; i<count; i++){
                        int stuId = Integer.parseInt(dtm.getValueAt(i, 0).toString());
                        String result = dtm.getValueAt(i, 1).toString();
                        res = res + psc.addBachelorPracticalResult(subId, stuId, result);
                    }
                    if(res == count){
                        JOptionPane.showMessageDialog(this,"Added successfully");
                    }
                }catch(NullPointerException e){
                     JOptionPane.showMessageDialog(this,"Enter all results", "error",JOptionPane.ERROR_MESSAGE);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,"All ready enter result", "error", JOptionPane.ERROR_MESSAGE);
                }
            }else if(courseId >3000){
                try{
                    int res =0;
                    int count = resultTable.getRowCount();
                    for(int i=0; i<count; i++){
                        int stuId = Integer.parseInt(dtm.getValueAt(i, 0).toString());
                        String result = dtm.getValueAt(i, 1).toString();
                        res = res + psc.addMasterPracticalResult(subId, stuId, result);
                    }
                    if(res == count){
                        JOptionPane.showMessageDialog(this, "Added successfully");
                    }
                }catch(NullPointerException e){
                     JOptionPane.showMessageDialog(this,"Enter all results", "error",JOptionPane.ERROR_MESSAGE);    
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ResultEnter.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,"All ready enter result", "error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        dtm.setRowCount(0);
    }//GEN-LAST:event_addBtnActionPerformed

    private void exitBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtn1ActionPerformed
        dispose();
    }//GEN-LAST:event_exitBtn1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResultEnter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResultEnter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResultEnter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultEnter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResultEnter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton exitBtn1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton normalSubject;
    private javax.swing.JRadioButton practicalSubject;
    private javax.swing.JTable resultTable;
    private javax.swing.JTextField subjectIdTxt;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}
